services:
  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_RENDERING_SERVER_URL=http://renderer:8081/render
      - GF_RENDERING_CALLBACK_URL=http://grafana:3000/
      - GF_LOG_FILTERS=rendering:debug
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - app-network

  renderer:
    image: grafana/grafana-image-renderer:latest
    ports:
    - "8081:8081"
    networks:
      - app-network

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - '--enable-feature=native-histograms'
      - '--enable-feature=exemplar-storage'
      - "--web.enable-remote-write-receiver"
    networks:
      - app-network

  k6:
    image: grafana/k6:latest
    volumes:
      - ./k6:/k6
    entrypoint: ["k6"]
    profiles: ["tests"]
    environment:
      - K6_PROMETHEUS_RW_SERVER_URL=http://prometheus:9090/api/v1/write
      - K6_PROMETHEUS_RW_TREND_AS_NATIVE_HISTOGRAM=true
    depends_on:
      - prometheus
    networks:
      - app-network
  
  fastapi:
    build:
      context: .
      dockerfile: be-fastapi/Dockerfile
    ports: 
      - "8001:8001"
    networks:
      - app-network
    # deploy:
    #   resources:
    #     limits:
    #       cpus: "0.5"
    #       memory: "512M"
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8001"]

  express:
    build:
      context: .
      dockerfile: be-express/Dockerfile
    ports:
      - "8002:8002"
    networks:
      - app-network
    # deploy:
    #   resources:
    #     limits:
    #       cpus: "0.5"
    #       memory: "512M"
    command: ["node", "index.js"]

networks:
  app-network:
    driver: bridge